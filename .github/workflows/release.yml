name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## What's Changed
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Installation
          
          ### Via Cargo
          ```bash
          cargo install nw-nu_plugin_ulid
          ```
          
          ### Via Binary
          Download the appropriate binary for your platform from the assets below.
          
          ## Usage
          
          After installation, register the plugin with Nushell:
          ```bash
          plugin add ./nu_plugin_ulid
          plugin use ulid
          ```

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: nu_plugin_ulid
            asset_name: nu_plugin_ulid-v${{ needs.create-release.outputs.version }}-linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: nu_plugin_ulid
            asset_name: nu_plugin_ulid-v${{ needs.create-release.outputs.version }}-linux-aarch64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: nu_plugin_ulid.exe
            asset_name: nu_plugin_ulid-v${{ needs.create-release.outputs.version }}-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: nu_plugin_ulid
            asset_name: nu_plugin_ulid-v${{ needs.create-release.outputs.version }}-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: nu_plugin_ulid
            asset_name: nu_plugin_ulid-v${{ needs.create-release.outputs.version }}-macos-aarch64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to Crates.io
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Run quality gates before publishing
      run: |
        echo "üîç Running Quality Gates..."
        
        # Code quality
        echo "üìã Checking code quality..."
        cargo clippy --all-targets --all-features -- -D warnings
        cargo fmt --all --check
        
        # Testing
        echo "üß™ Running tests..."
        cargo test --all-features --release
        
        # Security
        echo "üîí Security audit..."
        cargo install cargo-audit --locked
        cargo audit
        
        echo "‚úÖ All quality gates passed!"

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
      run: |
        echo "üì¶ Publishing to crates.io..."
        cargo publish --token $CARGO_REGISTRY_TOKEN
        echo "‚úÖ Successfully published to crates.io!"